{% extends 'Base.html.jinja' %}

{% block content %}

{% if createNew %}
  <h2 class="page-title" style="text-align: center;"><span class="font-weight-light">Creating</span> <b>new relval</b></h2>
{% else %}
  <h2 class="page-title" style="text-align: center;"><span class="font-weight-light">Editing relval</span> <b>{{form.prepid.data}}</b></h2>
{% endif %}

<form method="POST" style='text-align: left; margin: 5px 19%; padding: 10px;' class='shadow bg-white' id='relval_form'>
    
  {{ form.hidden_tag() }}
  {% set shortItems = ['matrix', 'workflow_id', 'size_per_event', 'time_per_event', 'cpu_cores', 'memory'] %}

  <table>
    {% for item in form if not item.id in ['submit', 'step', 'add_step', 'csrf_token'] %}
      <tr id="{{ item.id }}_row">
        <td style="width: 20%;">
          {{ item.label() }}
        </td>
        <td class="second-column">
          {{ item() }}
        </td>
      </tr>

      {% for error in item.errors %}
        <tr class="small-footers">
          <td class="col-sm-2"></td>
          <td>
            <small style="color: red"><i class="bi bi-arrow-up-circle"></i> {{error}}</small>
          </td>
        </tr>
      {% endfor %}
    {% endfor %} 

    <tr id="{{ form.step.id }}_row">
      <td style="width: 20%;">
        {{ form.step.label() }}
      </td>
      <td id="steps_column_id" class="second-column">
        {{ form.step() }}
      </td>
    </tr>
  </table>

  <div style="text-align: center;">
    {{ form.submit(class_="btn btn-primary", value="Save RelVal") }}
    <button class="btn btn-danger" onclick="cancel(); return false;">Cancel</button>
  </div>
</form>

<style type="text/css">
  table {
    width: 100%;
  }
  input[type="checkbox"]{
    /*Changing height to re-align checkbox, ratio. 
    matching with the label height*/
    height: 31px;
  }
  input[name="workflow_id"] {
    width: 45%;
  }
  select[name$="scenario"] {
    width: 45%;
  }
  input[type="number"] {
    width: 45%;
    text-align: right;
    margin-right: 4px;
  }
  select[name="matrix"] {
    width: 45%;
  }
  table label{
    margin-bottom: 0px;
  }
  td {
    padding-top: 10px;
  }
 .first-column {
    width: 20%;
  }
  .second-column {
    display: flex;
    align-items: center;
  }
  .small-footers td {
    padding-top:0px!important;
  }
</style>

<script type="text/javascript">
  var stepNumber = 0;
  var forminputdata = '';
  var query_string = '{{ query_string }}';
  var button = '<tr id="addstep_newrow"><td style="width: 20%;"></td><td><button class="btn btn-sm btn-primary" id="add_step" name="add_step" onclick="addStep()" type="button" value="">Add Step</button></td></tr>'
  function getCount(parent, getChildrensChildren){
      var relevantChildren = 0;
      var children = parent.childNodes.length;
      for(var i=0; i < children; i++){
          if(parent.childNodes[i].nodeType != 3){
              if(getChildrensChildren)
                  relevantChildren += getCount(parent.childNodes[i],true);
              relevantChildren++;
          }
      }
      return relevantChildren;
  }
  function cancel(){
      window.location = '/relvals';
  }

  function delete_step(Id) {
      var step_col = document.getElementById('steps_column_id')
      let index = Id.split('step ')[1].split('-')[0]
      var formarray = $('form').serializeArray();
      var forminputdata = JSON.stringify(relvalFormToJSON(formarray));
      let options = {
          method: "PUT", 
          body: forminputdata, 
          headers: {"Content-Type": "application/json;"}
      }
      let url = '/relvals/delete_step/'+index+'?'+query_string;
      fetch(url, options).then(res => res.json()).then(d =>{
          step_col.innerHTML = "";
          step_col.insertAdjacentHTML('beforeend', d.response)
          forminputdata = d.inputdata
          addStepNumbers()
          toggleDriverOptionsOnStart()
      })
  }

  function relvalFormToJSON(array) {
      var d = {};
      $(array).each(function() {
          if (d[this.name] !== undefined){
              if (!Array.isArray(d[this.name])) {
                  d[this.name] = [d[this.name]];
              }
              d[this.name].push(this.value);
          }else{
              d[this.name] = this.value;
          }
      });
      return d;
  }

  function addStep(){
    var step_col = document.getElementById('steps_column_id')
    var stepNumber = getCount(step_col, false)
    var disabled = $('form').find(':input:disabled').removeAttr('disabled');
    var formarray = $('form').serializeArray();
    disabled.attr('disabled','disabled');
    var forminputdata = JSON.stringify(relvalFormToJSON(formarray));
    let options = {
        method: "PUT", 
        body: forminputdata,
        headers: {"Content-Type": "application/json;"}
    }
    fetch('/relvals/add_step?'+query_string, options).then(res => {
      if (res.status >= 200 && res.status <= 299) {
        return res.json();
      } else {
        throw Error(res.statusText);
      }
    }).then(data =>{
      step_col.innerHTML = "";
      step_col.insertAdjacentHTML('beforeend', data.response)
      addStepNumbers()
      toggleDriverOptionsOnStart()
      validateJSON('step 1-input-lumisection')
      validateRunNumbers('step 1-input-run')
      toggleDataMCFastOnStart()
    }).catch(error => {
      let message = ["Your session might have expired", "Please re-login by refreshing a page!"]
      alertModal(error)
    });
  }

  function addStepNumbers() {
    var stepEl = document.getElementById('step')
    var nsteps = getCount(stepEl, false)
    var steplabel = $('label[for="step"]')
    steplabel.html('Steps ('+nsteps+')')
    if (nsteps == '0'){
      $('#step').remove()
      var bbutton = '<button class="btn btn-sm btn-primary" id="add_step" name="add_step" onclick="addStep()" type="button" value="">Add Step</button>'
      document.getElementById('steps_column_id').insertAdjacentHTML('beforeend', button)
      if ($('#addstep_newrow').length) $('#addstep_newrow').remove()
    } else{
      if (!$('#addstep_newrow').length)document.getElementById('steps_column_id').parentNode.insertAdjacentHTML('afterend', button)
    }
    $('#add_step').html('Add Step '+(nsteps+1))
    return nsteps
  }

  function toggleDriverOptionsOnStart() {
    $('input[value="input"]').each(function(index, value) {
      toggleDriverOption(this.id)
    })
  }

  function toggleDriverOption(id){
    var inputEl = id.split('-')[0]+'-step_type-0'
    var inputRow = '.'+id.split('-')[0].replace(' ', '_')+'-input-row'
    var driverRow = '.'+id.split('-')[0].replace(' ', '_')+'-driver-row'
    if (document.getElementById(inputEl).checked){
      $(inputRow).attr("hidden",false);
      $(driverRow).attr("hidden",true);
    } else {
      $(inputRow).attr("hidden",true);
      $(driverRow).attr("hidden",false);   
    }
  }

  function validateJSON(id) {
    var lumiid = document.getElementById('lumisesion_error_id')
    if (lumiid) lumiid.parentNode.parentNode.remove()
    try{
      var json = JSON.parse(document.getElementById(id).value);
      prettyPrint(id)
      var el = '<td></td><td style="padding-top: unset;"><small id="lumisesion_error_id" style="color: green">Valid JSON</small></td>'
      document.getElementById(id).parentNode.parentNode.insertAdjacentHTML('afterend', el)
    }catch (e){
      var el = '<td></td><td style="padding-top: unset;"><small id="lumisesion_error_id" style="color:red">Invalid JSON: '+e+'</small></td>'
      document.getElementById(id).parentNode.parentNode.insertAdjacentHTML('afterend', el)
    }
  }

  function toggleDataMCFast(id) {
    let index = id.split('step ')[1].split('-')[0]
    let mcChecked = document.getElementById('step '+index+'-driver-data_mc-1').checked
    if(mcChecked){
      document.getElementById('step '+index+'-driver-fast-row').hidden = false
    } else {
      document.getElementById('step '+index+'-driver-fast-row').hidden = true
      document.getElementById('step '+index+'-driver-fast').checked = false
    }
  }

  function toggleDataMCFastOnStart(nsteps){
    if (nsteps==0) return false
    $("[id$=-driver-data_mc-1]").each(function(index, value) {
      toggleDataMCFast(this.id)
    })
  }

  function validateJSONOnStart(nsteps){
    if (nsteps != 0) {
      validateJSON('step 1-input-lumisection')
      validateRunNumbers('step 1-input-run')            
    }
  }

  function makeStepsReadOnly(){
    if(document.getElementById('step').getAttribute('readonly')==''){
      $("#step :input").prop("readonly", true);
    }
  }
  $(document).ready(function() {
    var nsteps = addStepNumbers()
    toggleDriverOptionsOnStart()
    validateJSONOnStart(nsteps)
    toggleDataMCFastOnStart(nsteps)
  })

  $('title').html('AlCaVal | RelVal Edit')
</script>

<style type="text/css">
  .required:after {
    content:" *";
    color: red;
  }
  select:invalid {
    color: slategray;
  }
</style>
{% endblock %}